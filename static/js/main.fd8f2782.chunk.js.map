{"version":3,"sources":["AddItemForm.tsx","EditTableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","newTitle","trim","TextField","helperText","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","AddBox","EditTableSpan","editMode","setEditMode","autoFocus","onBlur","changeItem","onDoubleClick","Todolist","changeTodoListTitle","id","aria-label","removeTodolist","Delete","addTask","style","listStyle","paddingLeft","tasks","map","t","key","className","isDone","Checkbox","color","newIsDoneValue","checked","changeTaskStatus","changeTaskTitle","size","removeTask","Button","filter","margin","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","todoListID","todoList","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","item","xs","padding","newTodoListID","allTodolistTasks","tasksForTodolist","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fd8f2782.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n    title: string\n}\n\nexport function AddItemForm(props: AddItemFormType) {\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {setTitle(e.currentTarget.value)}\n    const addItem = () => {\n        let newTitle = title.trim();\n        if (newTitle !== \"\") {\n            props.addItem(newTitle);\n            setTitle(\"\");\n        } else {setError(\"Title is required\");}\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {setError(null);\n        if (e.charCode === 13) {addItem()}\n    }\n    return (\n        <div>\n            <TextField\n                helperText={error? 'title is requed': \"\"}\n                error={!!error}\n               variant={\"filled\"}\n                label={props.title}\n                value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n            />\n            <IconButton onClick={addItem}><AddBox /></IconButton>\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\n        </div>\n\n\n    )\n};\n\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\ntype EditTableSpanType ={\n    title: string\n    changeItem: (title: string) => void\n}\nexport const EditTableSpan = (props: EditTableSpanType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    function onEditMode () {\n        setEditMode(true)\n    }function offEditMode () {\n        setEditMode(false)\n        props.changeItem(title)\n    }\n    function  changeTitle (e: ChangeEvent<HTMLInputElement>) {\n        setTitle(e.currentTarget.value)\n        // отдать родителю новое название\n\n    }\n    return (\n             editMode\n            ? <TextField\n                 variant={\"standard\"}\n                value={title}\n                autoFocus\n                onBlur={offEditMode}\n                 onChange={changeTitle}/>\n            : <span onDoubleClick={onEditMode}> {props.title}</span>\n\n    );\n};\n\nexport default EditTableSpan;","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditTableSpan from \"./EditTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodolistTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditTableSpan title={props.title} changeItem={changeTodolistTitle} />\r\n            <IconButton aria-label=\"delete\" onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} title={'title...'}/>\r\n        {/*теперь здесь функция addItem начинает работать как  addTask*/}\r\n\r\n\r\n        <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n            {props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)}\r\n\r\n                    const changeTitle = (title: string) => {props.changeTaskTitle(t.id,title, props.id)}\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color={\"secondary\"} onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditTableSpan title={t.title} changeItem={changeTitle}/>\r\n                        <IconButton  size={\"small\"} aria-label=\"delete\" onClick={onClickHandler}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={\"contained\"} color={props.filter === 'all' ? \"secondary\" : \"primary\"} size={\"small\"}\r\n                    style={{margin:'5px'}}\r\n                //className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={\"contained\"} color={props.filter === 'active' ? \"secondary\" : \"primary\"}  size={\"small\"}\r\n                    style={{margin:'5px'}}\r\n               // className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={\"contained\"} color={props.filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"} style={{margin:'5px'}}\r\n               // className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true},\r\n            {id: v1(), title: \"Honny\", isDone: true},\r\n            {id: v1(), title: \"Flowers\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    // functions for tasks\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    // functions for todoLists\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodolistType = {\r\n            id: newTodoListID, title: title, filter: 'all'\r\n        }\r\n        setTodolists([newTodoList, ...todolists])\r\n        setTasks({...tasks, [newTodoListID]: []})  // добавляем обьект свойство которого пустой масив\r\n    }\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        const todoList = todolists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTodolists([...todolists]);\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n    <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\"> <Menu /></IconButton>\r\n                <Typography variant=\"h6\" >News </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            {/*// fixed -атрибут подстраивает под размер экрана*/}\r\n            <Grid container item xs={12}  style={{padding:'20px'}}>\r\n                <AddItemForm addItem={addTodoList} title={'task title'}/>\r\n            </Grid >\r\n            <Grid container >{todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Grid item key={tl.id} style={{padding:'20px'}}>\r\n                        <Paper elevation={10} style={{padding:'15px'}}><Todolist\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        /></Paper></Grid>\r\n                })\r\n            }</Grid>\r\n        </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}